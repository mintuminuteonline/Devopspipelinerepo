trigger:
  branches:
    include:
      - main
pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  awsServiceConnection: 'aws-oidc-federation' # AWS service connection name
  awsRegion: 'us-east-1' # AWS region for deployment
  sonarQubeTemplatePath: '$(System.DefaultWorkingDirectory)/sonarqube-stack-public-only.yaml' # Path to SonarQube CFT
  sonarQubeStackName: 'SonarQubeStackPublicOnly' # Stack name
  vpcId: 'vpc-093582a4fa8c1828e' # Replace with your VPC ID
  publicSubnetId: 'subnet-0601e2496fa2b037b' # Replace with your public subnet ID
  keyName: 'delivery-keypair' # Replace with your EC2 key pair name
  dbPassword: 'MySecurePass123' # Replace with a secure password
  allowedCidrIp: '0.0.0.0/0' # Restrict to Azure DevOps IP range for production

stages:
  - stage: Deploy_SonarQube
    displayName: 'Deploy SonarQube Stack'
    jobs:
      - deployment: DeploySonarQube
        displayName: 'Deploy SonarQube to AWS'
        environment: 'SonarQube'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: 'Checkout Code'
                - task: AWSShellScript@1
                  displayName: 'Deploy SonarQube CloudFormation Stack'
                  inputs:
                    awsCredentials: '$(awsServiceConnection)'
                    regionName: '$(awsRegion)'
                    scriptType: 'inline'
                    inlineScript: |
                      aws cloudformation deploy \
                        --template-file $(sonarQubeTemplatePath) \
                        --stack-name $(sonarQubeStackName) \
                        --parameter-overrides \
                          VpcId=$(vpcId) \
                          PublicSubnetId=$(publicSubnetId) \
                          KeyName=$(keyName) \
                          DBPassword=$(dbPassword) \
                          AllowedCidrIp=$(allowedCidrIp) \
                        --capabilities CAPABILITY_NAMED_IAM
                - task: AWSShellScript@1
                  displayName: 'Get SonarQube URL'
                  inputs:
                    awsCredentials: '$(awsServiceConnection)'
                    regionName: '$(awsRegion)'
                    scriptType: 'inline'
                    inlineScript: |
                      SONARQUBE_URL=$(aws cloudformation describe-stacks \
                        --stack-name $(sonarQubeStackName) \
                        --query 'Stacks[0].Outputs[?OutputKey==`SonarQubeURL`].OutputValue' \
                        --output text)
                      echo "##vso[task.setvariable variable=sonarQubeUrl;isOutput=true]$SONARQUBE_URL"
                  name: setSonarQubeUrl
